{"version":3,"sources":["components/myform.js","components/greetings.js","App.js","reportWebVitals.js","index.js"],"names":["MyForm","initialFormState","name","preparation_time","type","no_of_slices","diameter","spiciness_scale","slices_of_bread","nameError","preparation_timeError","typeError","no_of_slicesError","diameterError","spiciness_scaleError","slices_of_breadError","useState","formState","changeState","handleSubmit","event","initialErrors","prevState","validateForm","preventDefault","axios","post","then","res","console","log","data","alert","catch","err","response","status","className","onSubmit","value","placeholder","onChange","target","step","valueAsNumber","Greetings","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9e98286.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst MyForm = () => {\r\n  const initialFormState = {\r\n    name: \"\",\r\n    preparation_time: \"\",\r\n    type: \"\",\r\n    no_of_slices: \"\",\r\n    diameter: \"\",\r\n    spiciness_scale: \"\",\r\n    slices_of_bread: \"\",\r\n    nameError: \"\",\r\n    preparation_timeError: \"\",\r\n    typeError: \"\",\r\n    no_of_slicesError: \"\",\r\n    diameterError: \"\",\r\n    spiciness_scaleError: \"\",\r\n    slices_of_breadError: \"\",\r\n  };\r\n\r\n  const [formState, changeState] = useState(initialFormState);\r\n\r\n  //Function sends state to endpoint using axios. It also handle possible errors and do some actions if there is no error\r\n  const sendData = () => {\r\n    axios\r\n      .post(\"https://frosty-wood-6558.getsandbox.com:443/dishes\", formState)\r\n      .then((res) => {\r\n        console.log(\"Data has been successfully posted\");\r\n        console.log(\"Response:\", res.data);\r\n        alert(\r\n          \"Congratulations! Your meal is ordered now. Feel free to choose something more\"\r\n        );\r\n        changeState(initialFormState);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error number: \", err.response.status);\r\n        console.log(\"Error description: \", err.response.data);\r\n        changeState(initialFormState);\r\n        alert(\"Something went wrong. Try again\");\r\n      });\r\n  };\r\n\r\n  //Function validates data from user. Checks if each required value exists and if not, it creates a message for user and\r\n  //prevent sending form (to avoid sending many unnecessary requests).\r\n  //Returns true if data is valid, false if not\r\n  const validateForm = () => {\r\n    let initialErrors = {\r\n      nameError: \"\",\r\n      preparation_timeError: \"\",\r\n      typeError: \"\",\r\n      no_of_slicesError: \"\",\r\n      diameterError: \"\",\r\n      spiciness_scaleError: \"\",\r\n      slices_of_breadError: \"\",\r\n    };\r\n\r\n    let {\r\n      nameError,\r\n      preparation_timeError,\r\n      typeError,\r\n      no_of_slicesError,\r\n      diameterError,\r\n      spiciness_scaleError,\r\n      slices_of_breadError,\r\n    } = initialErrors;\r\n\r\n    if (!formState.name) {\r\n      nameError = \"Dish name is empty!\";\r\n      changeState((prevState) => ({\r\n        ...prevState,\r\n        ...initialErrors,\r\n        nameError,\r\n      }));\r\n      return false;\r\n    }\r\n\r\n    if (!formState.preparation_time) {\r\n      preparation_timeError = \"Set preparation time\";\r\n      changeState((prevState) => ({\r\n        ...prevState,\r\n        ...initialErrors,\r\n        preparation_timeError,\r\n      }));\r\n      return false;\r\n    }\r\n\r\n    if (!formState.type) {\r\n      typeError = \"Choose type of the dish\";\r\n      changeState((prevState) => ({\r\n        ...prevState,\r\n        ...initialErrors,\r\n        typeError,\r\n      }));\r\n      return false;\r\n    }\r\n\r\n    if (formState.type == \"pizza\") {\r\n      if (!formState.no_of_slices) {\r\n        no_of_slicesError = \"Set number of slices\";\r\n        changeState((prevState) => ({\r\n          ...prevState,\r\n          ...initialErrors,\r\n          no_of_slicesError,\r\n        }));\r\n        return false;\r\n      }\r\n\r\n      if (!formState.diameter) {\r\n        diameterError = \"Set diameter\";\r\n        changeState((prevState) => ({\r\n          ...prevState,\r\n          ...initialErrors,\r\n          diameterError,\r\n        }));\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (formState.type == \"soup\") {\r\n      if (!formState.spiciness_scale) {\r\n        spiciness_scaleError = \"Choose spiciness of the soup\";\r\n        changeState((prevState) => ({\r\n          ...prevState,\r\n          ...initialErrors,\r\n          spiciness_scaleError,\r\n        }));\r\n        return false;\r\n      }\r\n\r\n      if (formState.spiciness_scale < 1 || formState.spiciness_scale > 10) {\r\n        spiciness_scaleError = \"Spiciness must be a value between 1-10\";\r\n        changeState((prevState) => ({\r\n          ...prevState,\r\n          ...initialErrors,\r\n          spiciness_scaleError,\r\n        }));\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (formState.type == \"sandwich\") {\r\n      if (!formState.slices_of_bread) {\r\n        spiciness_scaleError = \"Set amount of bread slices\";\r\n        changeState((prevState) => ({\r\n          ...prevState,\r\n          ...initialErrors,\r\n          slices_of_breadError,\r\n        }));\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  //Function triggers after form submission. First it runs validation function and if all input data are valid,\r\n  //it runs sendData() function.\r\n  const handleSubmit = (event) => {\r\n    const isValid = validateForm();\r\n    if (isValid) {\r\n      event.preventDefault();\r\n      sendData();\r\n    } else {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"myForm__wrap\">\r\n      <form onSubmit={(event) => handleSubmit(event)} className=\"myForm\">\r\n        <input\r\n          name=\"name\"\r\n          type=\"text\"\r\n          value={formState.name}\r\n          placeholder=\"Dish name\"\r\n          onChange={(event) => {\r\n            changeState((prevState) => ({\r\n              ...prevState,\r\n              name: event.target.value,\r\n            }));\r\n          }}\r\n          className=\"input__text\"\r\n        />\r\n        <div className=\"input__error-message\">{formState.nameError}</div>\r\n        <input\r\n          name=\"preparation_time\"\r\n          type=\"time\"\r\n          step=\"1\"\r\n          placeholder=\"HH:MM:SS\"\r\n          value={formState.preparation_time}\r\n          placeholder=\"Preparation time\"\r\n          onChange={(event) => {\r\n            changeState((prevState) => ({\r\n              ...prevState,\r\n              preparation_time: event.target.value,\r\n            }));\r\n          }}\r\n          className=\"input__time\"\r\n        />\r\n        <div className=\"input__error-message\">\r\n          {formState.preparation_timeError}\r\n        </div>\r\n        <select\r\n          name=\"type\"\r\n          value={formState.type}\r\n          onChange={(event) => {\r\n            changeState((prevState) => ({\r\n              ...prevState,\r\n              type: event.target.value,\r\n            }));\r\n          }}\r\n          className=\"input__select\"\r\n        >\r\n          <option className=\"input__option\" value=\"\">\r\n            Select dish type\r\n          </option>\r\n          <option className=\"input__option\">pizza</option>\r\n          <option className=\"input__option\">soup</option>\r\n          <option className=\"input__option\">sandwich</option>\r\n        </select>\r\n        <div className=\"input__error-message\">{formState.typeError}</div>\r\n        {formState.type == \"pizza\" ? (\r\n          <>\r\n            <input\r\n              name=\"no_of_slices\"\r\n              type=\"number\"\r\n              value={formState.no_of_slices}\r\n              onChange={(event) => {\r\n                changeState((prevState) => ({\r\n                  ...prevState,\r\n                  no_of_slices: event.target.valueAsNumber,\r\n                }));\r\n              }}\r\n              className=\"input__text\"\r\n              placeholder=\"Number of slices\"\r\n            />\r\n            <div className=\"input__error-message\">\r\n              {formState.no_of_slicesError}\r\n            </div>\r\n            <input\r\n              name=\"diameter\"\r\n              type=\"number\"\r\n              value={formState.diameter}\r\n              onChange={(event) => {\r\n                changeState((prevState) => ({\r\n                  ...prevState,\r\n                  diameter: event.target.valueAsNumber,\r\n                }));\r\n              }}\r\n              className=\"input__text\"\r\n              placeholder=\"Pizza's diameter\"\r\n            />\r\n            <div className=\"input__error-message\">\r\n              {formState.diameterError}\r\n            </div>\r\n          </>\r\n        ) : formState.type == \"soup\" ? (\r\n          <>\r\n            <input\r\n              name=\"spiciness_scale\"\r\n              type=\"number\"\r\n              value={formState.spiciness_scale}\r\n              onChange={(event) => {\r\n                changeState((prevState) => ({\r\n                  ...prevState,\r\n                  spiciness_scale: event.target.valueAsNumber,\r\n                }));\r\n              }}\r\n              className=\"input__text\"\r\n              placeholder=\"Spiciness scale (1-10)\"\r\n            />\r\n            <div className=\"input__error-message\">\r\n              {formState.spiciness_scaleError}\r\n            </div>\r\n          </>\r\n        ) : formState.type == \"sandwich\" ? (\r\n          <>\r\n            <input\r\n              name=\"slices_of_bread\"\r\n              type=\"number\"\r\n              value={formState.slices_of_bread}\r\n              onChange={(event) => {\r\n                changeState((prevState) => ({\r\n                  ...prevState,\r\n                  slices_of_bread: event.target.valueAsNumber,\r\n                }));\r\n              }}\r\n              className=\"input__text\"\r\n              placeholder=\"Amount of bread slices\"\r\n            />\r\n            <div className=\"input__error-message\">\r\n              {formState.slices_of_breadError}\r\n            </div>\r\n          </>\r\n        ) : null}\r\n        <button type=\"submit\" className=\"input__submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyForm;\r\n","import React from \"react\";\r\n\r\nconst Greetings = () => {\r\n  return (\r\n    <div className=\"greetings\">\r\n      Welcome to our restaurant. Please fill the form below to order a dish.\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Greetings;","import MyForm from \"./components/myform\";\r\nimport Greetings from \"./components/greetings\";\r\nimport \"./styles/theme/theme.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"page__wrap\">\r\n      <Greetings />\r\n      <MyForm />\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}